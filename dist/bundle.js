/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DefaultSettings.js":
/*!********************************!*\
  !*** ./src/DefaultSettings.js ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nexports.__esModule = true;\r\nexports.DefaultSettings = void 0;\r\nexports.DefaultSettings = {\r\n    SIZE_WIDTH: 300,\r\n    SIZE_HEIGHT: 300,\r\n    SMALL_W: 40,\r\n    SMALL_H: 40\r\n};\r\n// export default DefaultSettings;\r\n\n\n//# sourceURL=webpack://processtype/./src/DefaultSettings.js?");

/***/ }),

/***/ "./src/ImageLocal.js":
/*!***************************!*\
  !*** ./src/ImageLocal.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nexports.__esModule = true;\r\nexports.ImageLocal = void 0;\r\nvar DefaultSettings_js_1 = __webpack_require__(/*! ./DefaultSettings.js */ \"./src/DefaultSettings.js\");\r\nvar ImageLocal = /** @class */ (function () {\r\n    // protected document: HTMLDocument;\r\n    function ImageLocal(p, ready) {\r\n        this.img = new Image();\r\n        this.screen = p;\r\n        this.readyToDraw = ready;\r\n        this.isScaled = false;\r\n        this.drawSmallImg = this.drawSmallImg.bind(this);\r\n        this.handleFileSelect = this.handleFileSelect.bind(this);\r\n        this.onload = this.onload.bind(this);\r\n    }\r\n    ImageLocal.prototype.handleFileSelect = function (evt) {\r\n        var files;\r\n        if (evt.type === \"drop\") {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n            files = evt.dataTransfer.files;\r\n        }\r\n        if (evt.type === \"change\")\r\n            files = evt.target.files; // FileList object\r\n        // files is a FileList of File objects. List some properties.\r\n        var output = [];\r\n        //console.log(evt)\r\n        var f = files[0];\r\n        output.push('<li><strong>', f.name, '</strong> (', f.type || 'n/a', ') - ', f.size, ' bytes, last modified: ', f.lastModifiedDate.toLocaleDateString(), '</li>');\r\n        this.img.src = f.name;\r\n        this.readyToDraw = true;\r\n        document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';\r\n        this.onload();\r\n    };\r\n    ImageLocal.prototype.drawSmallImg = function (evt) {\r\n        var xPos = evt.offsetX - 2;\r\n        var yPos = evt.offsetY - 2;\r\n        var pixel = this.screen.getImageData(xPos, yPos, 1, 1);\r\n        if (this.readyToDraw) {\r\n            if (this.isScaled) {\r\n                xPos *= (this.img.width / DefaultSettings_js_1.DefaultSettings.SIZE_WIDTH);\r\n                yPos *= (this.img.height / DefaultSettings_js_1.DefaultSettings.SIZE_HEIGHT);\r\n            }\r\n            this.screen.clearRect(0, 0, DefaultSettings_js_1.DefaultSettings.SIZE_WIDTH, DefaultSettings_js_1.DefaultSettings.SIZE_HEIGHT);\r\n            this.screen.strokeStyle = \"lightgray\";\r\n            this.screen.imageSmoothingEnabled = false;\r\n            this.isScaled ?\r\n                this.screen.drawImage(this.img, 0, 0, DefaultSettings_js_1.DefaultSettings.SIZE_WIDTH, DefaultSettings_js_1.DefaultSettings.SIZE_HEIGHT)\r\n                : this.screen.drawImage(this.img, 0, 0, this.img.width, this.img.height);\r\n            this.screen.strokeRect(evt.offsetX + 5, evt.offsetY + 5, DefaultSettings_js_1.DefaultSettings.SMALL_W, DefaultSettings_js_1.DefaultSettings.SMALL_H);\r\n            this.screen.drawImage(this.img, Math.floor(xPos - 3), Math.floor(yPos - 3), 5, 5, evt.offsetX + 5, evt.offsetY + 5, DefaultSettings_js_1.DefaultSettings.SMALL_W, DefaultSettings_js_1.DefaultSettings.SMALL_H);\r\n            var color = document.getElementById('color');\r\n            var data = pixel.data;\r\n            var rgba = 'rgba(' + data[0] + ', ' + data[1] +\r\n                ', ' + data[2] + ', ' + (data[3] / 255) + ')';\r\n            color.style.background = rgba;\r\n            //color.textContent = rgba;\r\n            document.getElementById('rgb').innerHTML = '<strong>' + rgba + '</strong> ';\r\n        }\r\n    };\r\n    ImageLocal.prototype.getImage = function () {\r\n        return this.img;\r\n    };\r\n    ImageLocal.prototype.getScreen = function () {\r\n        return this.screen;\r\n    };\r\n    ImageLocal.prototype.setScaled = function (v) {\r\n        this.isScaled = v;\r\n    };\r\n    ImageLocal.prototype.onload = function () {\r\n        this.getScreen().clearRect(0, 0, DefaultSettings_js_1.DefaultSettings.SIZE_WIDTH, DefaultSettings_js_1.DefaultSettings.SIZE_HEIGHT);\r\n        /** SI nuestro canvas es mas pequeño que la imagen se dibuja a su escala normal,\r\n         * si es mas grande se dibuja reescalado al ancho de ventana por default  */\r\n        if (this.getImage().width > DefaultSettings_js_1.DefaultSettings.SIZE_WIDTH\r\n            || this.getImage().height > DefaultSettings_js_1.DefaultSettings.SIZE_HEIGHT) {\r\n            this.getScreen().drawImage(this.getImage(), 0, 0, DefaultSettings_js_1.DefaultSettings.SIZE_WIDTH, DefaultSettings_js_1.DefaultSettings.SIZE_HEIGHT);\r\n            this.setScaled(true);\r\n        }\r\n        else {\r\n            this.getScreen().drawImage(this.getImage(), 0, 0, this.getImage().width, this.getImage().height);\r\n            this.setScaled(false);\r\n        }\r\n    };\r\n    return ImageLocal;\r\n}());\r\nexports.ImageLocal = ImageLocal;\r\n\n\n//# sourceURL=webpack://processtype/./src/ImageLocal.js?");

/***/ }),

/***/ "./src/ImageType.js":
/*!**************************!*\
  !*** ./src/ImageType.js ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nexports.__esModule = true;\r\nexports.ImageType = void 0;\r\nvar _1 = __webpack_require__(/*! . */ \"./src/index.js\");\r\nvar ImageType = /** @class */ (function () {\r\n    /**  Constructor general\r\n     * @img es un objeto tipo HTMLImageElement del cual se extrae el tamaño de la imagen\r\n     * @sc es el elemento Canvas de donde se ha dibujado la img\r\n    */\r\n    function ImageType(sc, img, w, h, data) {\r\n        if (img) {\r\n            this._width = _1.NumnewCanWidth;\r\n            this._height = _1.NumnewCanHeight;\r\n            console.log(\"QQQQQQQ\", _1.NumnewCanWidth);\r\n            this.imageData = sc.getImageData(0, 0, this._width, this._height);\r\n            console.log(\"con\", this.imageData);\r\n        }\r\n        else {\r\n            this._width = w;\r\n            this._height = h;\r\n            this.imageData = sc.getImageData(0, 0, this._width, this._height);\r\n            console.log(\"sin\", this.imageData);\r\n        }\r\n        this.screenCanvas = sc;\r\n        this.initArray();\r\n        if (!data)\r\n            this.dataToImageArray2D();\r\n        else\r\n            this.dataTextToImageArray2D();\r\n        /*this.dataToImageArray2D = this.dataToImageArray2D.bind(this);\r\n        this.imageArray2DtoData = this.imageArray2DtoData.bind(this);*/\r\n    }\r\n    /** Metodo que devuelve las coordenas del array unidimensional de datos de la imagen */\r\n    ImageType.prototype.getColorIndicesForCoord = function (x, y) {\r\n        var red = y * (this._width * 4) + x * 4;\r\n        return [red, red + 1, red + 2, red + 3];\r\n    };\r\n    /** Convierte la data de la imagen a un arreglo tridimensional de manera que que queda asi:\r\n     * img[canalDeColor][anchoImg][altoImg]\r\n     */\r\n    ImageType.prototype.dataToImageArray2D = function () {\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.arrImage[0][i][j] = this.imageData.data[position[0]];\r\n                this.arrImage[1][i][j] = this.imageData.data[position[1]];\r\n                this.arrImage[2][i][j] = this.imageData.data[position[2]];\r\n            }\r\n        }\r\n        //return this.arrImage;\r\n    };\r\n    ImageType.prototype.dataTextToImageArray2D = function () {\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.arrImage[0][i][j] = this.imageData.data[position[3]];\r\n                //this.arrImage[1][i][j] = this.imageData.data[position[1]];\r\n                //this.arrImage[2][i][j] = this.imageData.data[position[2]];\r\n            }\r\n        }\r\n        //return this.arrImage;\r\n    };\r\n    /** Covierte un arreglo 3d de la imagen a un objeto data, si el argumento existe se dibuja\r\n     * @sc elemento Canas donde se desa dibujar la data\r\n     */\r\n    ImageType.prototype.imageArray2DtoData = function (sc, arrImage) {\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.imageData.data[position[0]] = arrImage[0][i][j];\r\n                this.imageData.data[position[1]] = arrImage[1][i][j];\r\n                this.imageData.data[position[2]] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        sc.putImageData(this.imageData, 0, 0);\r\n        //sc.fillRect(10,10,100,100)\r\n    };\r\n    /** Covierte un arreglo 3d de la imagen a un objeto data, si el argumento existe se dibuja\r\n     * @sc elemento Canas donde se desa dibujar la data\r\n     */\r\n    ImageType.prototype.newImageArray2DtoData = function (sc, arrImage) {\r\n        var position;\r\n        this.imageData = sc.createImageData(this._width, this._height);\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.imageData.data[position[0]] = arrImage[0][i][j];\r\n                this.imageData.data[position[1]] = arrImage[1][i][j];\r\n                this.imageData.data[position[2]] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        //sc.fillRect(10,10,100,100)\r\n        //sc.fillText(\"texto\", 10, 10)\r\n        console.log(this.imageData);\r\n        sc.putImageData(this.imageData, 0, 0);\r\n    };\r\n    /**\r\n     * Funcion que reescala los valores dew la imagen a el rango de una imagen de 0 - 255,\r\n     * la imagen puede estar en cualrquier rango de nunmeros reales.\r\n     * @param arrImage arrar of data\r\n     * @param alto image heigh\r\n     * @param ancho image width\r\n     */\r\n    ImageType.prototype.imageArray2DtoDataWithResizing = function (sc, arrImage) {\r\n        //variable donde guardamos la salida\r\n        //var sal: number[][][] = this.initArray(ancho, alto);\r\n        var max, min, factor;\r\n        max = arrImage[0][0][0];\r\n        min = arrImage[0][0][0];\r\n        var position;\r\n        //console.log(arrImage)\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                max = Math.max(max, arrImage[0][i][j]);\r\n                min = Math.min(min, arrImage[0][i][j]);\r\n            }\r\n        }\r\n        factor = 255.0 / (max - min);\r\n        //console.log(factor, max, min )\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.imageData.data[position[0]] = Math.floor(factor * (arrImage[0][i][j] - min));\r\n                this.imageData.data[position[1]] = Math.floor(factor * (arrImage[1][i][j] - min));\r\n                this.imageData.data[position[2]] = Math.floor(factor * (arrImage[2][i][j] - min));\r\n            }\r\n        }\r\n        sc.putImageData(this.imageData, 0, 0);\r\n    };\r\n    ImageType.prototype.initArray = function () {\r\n        this.arrImage = new Array(3);\r\n        this.arrImage[0] = new Array(this._height);\r\n        this.arrImage[1] = new Array(this._height);\r\n        this.arrImage[2] = new Array(this._height);\r\n        for (var i = 0; i < this._height; i++) {\r\n            this.arrImage[0][i] = new Array(this._width);\r\n            this.arrImage[1][i] = new Array(this._width);\r\n            this.arrImage[2][i] = new Array(this._width);\r\n        }\r\n    };\r\n    ImageType.prototype.getArrayImg = function () {\r\n        return this.arrImage;\r\n    };\r\n    ImageType.prototype.getWidth = function () {\r\n        return this._width;\r\n    };\r\n    ImageType.prototype.getHeight = function () {\r\n        return this._height;\r\n    };\r\n    return ImageType;\r\n}());\r\nexports.ImageType = ImageType;\r\n\n\n//# sourceURL=webpack://processtype/./src/ImageType.js?");

/***/ }),

/***/ "./src/ImagenLocal.js":
/*!****************************!*\
  !*** ./src/ImagenLocal.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nexports.__esModule = true;\r\nexports.Sepia = void 0;\r\nvar Sepia = function () {\r\n    console.log('ImagenLocal');\r\n};\r\nexports.Sepia = Sepia;\r\n\n\n//# sourceURL=webpack://processtype/./src/ImagenLocal.js?");

/***/ }),

/***/ "./src/MathImg.js":
/*!************************!*\
  !*** ./src/MathImg.js ***!
  \************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nexports.__esModule = true;\r\nexports.MathImg = void 0;\r\nvar MathImg = /** @class */ (function () {\r\n    function MathImg() {\r\n    }\r\n    MathImg.initArray = function (width, height) {\r\n        var arrImage = new Array(3);\r\n        arrImage[0] = new Array(height);\r\n        arrImage[1] = new Array(height);\r\n        arrImage[2] = new Array(height);\r\n        for (var i = 0; i < height; i++) {\r\n            arrImage[0][i] = new Array(width);\r\n            arrImage[1][i] = new Array(width);\r\n            arrImage[2][i] = new Array(width);\r\n        }\r\n        console.log(arrImage);\r\n        console.log(width, height);\r\n        return arrImage;\r\n    };\r\n    MathImg.initArray2D = function (width, height) {\r\n        var arrImage = new Array(2);\r\n        arrImage[0] = new Array(height);\r\n        arrImage[1] = new Array(height);\r\n        for (var i = 0; i < height; i++) {\r\n            arrImage[0][i] = new Array(width);\r\n            arrImage[1][i] = new Array(width);\r\n        }\r\n        return arrImage;\r\n    };\r\n    MathImg.toGray = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = prom;\r\n                sal[1][i][j] = prom;\r\n                sal[2][i][j] = prom;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toNegative = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.pow(arrImage[0][i][j], 2);\r\n                sal[1][i][j] = Math.pow(arrImage[1][i][j], 2);\r\n                sal[2][i][j] = Math.pow(arrImage[2][i][j], 2);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toRed = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j];\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toGreen = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toBlue = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    //este codigose agrego el 4 de abril de 2022\r\n    MathImg.toTricolor = function (img) {\r\n        var arrImage = img.getArrayImg();\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var inicio = 0, termino = Math.floor(img.getWidth() / 3);\r\n        console.log(inicio, termino);\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = inicio; j < termino; j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        inicio = termino;\r\n        termino = 2 * Math.floor(img.getWidth() / 3);\r\n        var prom;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = inicio; j < termino; j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = prom;\r\n                sal[1][i][j] = prom;\r\n                sal[2][i][j] = prom;\r\n            }\r\n        }\r\n        inicio = termino;\r\n        termino = img.getWidth();\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = inicio; j < termino; j++) {\r\n                sal[0][i][j] = arrImage[0][i][j];\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.correctionGamma = function (img, factores) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = this.funcionGamma(arrImage[0][i][j], factores[0]);\r\n                sal[1][i][j] = this.funcionGamma(arrImage[1][i][j], factores[1]);\r\n                sal[2][i][j] = this.funcionGamma(arrImage[2][i][j], factores[2]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.funcionGamma = function (pixel, factor) {\r\n        return Math.min(255 * Math.pow(pixel / 250, factor), 255);\r\n    };\r\n    MathImg.toUmbral = function (img, umbral) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = prom > umbral ? 255 : 0;\r\n                sal[1][i][j] = sal[0][i][j];\r\n                sal[2][i][j] = sal[0][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDesfaceX = function (img, des) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                if ((j - des) >= 0) {\r\n                    sal[0][i][j] = arrImage[0][i][j - des];\r\n                }\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                if ((j + des) < cols) {\r\n                    sal[2][i][j] = arrImage[2][i][j + des];\r\n                }\r\n                else {\r\n                    sal[2][i][j] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDesfaceY = function (img, desy) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                if ((i - desy) >= 0) {\r\n                    sal[0][i][j] = arrImage[0][i - desy][j];\r\n                }\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                if ((i + desy) < fila) {\r\n                    sal[2][i][j] = arrImage[2][i + desy][j];\r\n                }\r\n                else {\r\n                    sal[2][i][j] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDesfaceD = function (img, des, ang) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        var desx = Math.floor(des * Math.cos(ang * Math.PI / 180));\r\n        var desy = Math.floor(des * Math.sin(ang * Math.PI / 180));\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                if ((i - desy) >= 0 && (j - desx) >= 0) {\r\n                    sal[0][i][j] = arrImage[0][i - desy][j - desx];\r\n                }\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                if ((i + desy) < fila && (j + desx) < cols) {\r\n                    sal[2][i][j] = arrImage[2][i + desy][j + desx];\r\n                }\r\n                else {\r\n                    sal[2][i][j] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toUmbral2limites = function (img, rangos) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var rangoMin = rangos[0];\r\n        var rangoMax = rangos[1];\r\n        var prome;\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                prome = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                if (prome <= rangoMin && prome >= rangoMax) {\r\n                    sal[0][i][j] = 250;\r\n                }\r\n                else\r\n                    sal[0][i][j] = 0;\r\n                sal[1][i][j] = sal[0][i][j];\r\n                sal[2][i][j] = sal[0][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.changeBrightness = function (img, factor) {\r\n        var arrImage = img.getArrayImg();\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] * factor > 255.0 ? 255.0 : arrImage[0][i][j] * factor;\r\n                sal[1][i][j] = arrImage[1][i][j] * factor > 255.0 ? 255.0 : arrImage[1][i][j] * factor;\r\n                sal[2][i][j] = arrImage[2][i][j] * factor > 255.0 ? 255.0 : arrImage[2][i][j] * factor;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.relativeBrightness = function (img) {\r\n        var arrImage = img.getArrayImg();\r\n        var sal = this.initArray2D(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                //si el valor del pixel > umbral, entoncesa calculo el brillo\r\n                //si no el brillo =0\r\n                sal[0][i][j] = Math.sqrt(Math.pow(arrImage[0][i][j], 2) * 0.299 +\r\n                    Math.pow(arrImage[1][i][j], 2) * 0.587 +\r\n                    Math.pow(arrImage[2][i][j], 2) * 0.114) / 100.0;\r\n                sal[1][i][j] = 'rgb(' + arrImage[0][i][j] + ',' + arrImage[1][i][j] + ',' + arrImage[2][i][j] + ')';\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.colorGradienteX = function (img, factores) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        var r1, r2, b1, b2, g1, g2;\r\n        var dr, dg, db, dir;\r\n        r1 = factores[0];\r\n        g1 = factores[1];\r\n        b1 = factores[2];\r\n        r2 = factores[3];\r\n        g2 = factores[4];\r\n        b2 = factores[5];\r\n        dr = (r2 - r1) / img.getWidth();\r\n        dg = (g2 - g1) / img.getWidth();\r\n        db = (b2 - b1) / img.getWidth();\r\n        for (var j = 0; j < img.getWidth(); j++) {\r\n            for (var i = 0; i < img.getHeight(); i++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = Math.floor(prom * r1 / 255);\r\n                sal[1][i][j] = Math.floor(prom * g1 / 255);\r\n                sal[2][i][j] = Math.floor(prom * b1 / 255);\r\n            }\r\n            r1 += dr;\r\n            g1 += dg;\r\n            b1 += db;\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.colorGradientY = function (img, factores) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        var r1, r2, b1, b2, g1, g2;\r\n        var dr, dg, db;\r\n        r1 = factores[0];\r\n        g1 = factores[1];\r\n        b1 = factores[2];\r\n        r2 = factores[3];\r\n        g2 = factores[4];\r\n        b2 = factores[5];\r\n        dr = (r2 - r1) / img.getHeight();\r\n        dg = (g2 - g1) / img.getHeight();\r\n        db = (b2 - b1) / img.getHeight();\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = Math.floor(prom * r1 / 255);\r\n                sal[1][i][j] = Math.floor(prom * g1 / 255);\r\n                sal[2][i][j] = Math.floor(prom * b1 / 255);\r\n            }\r\n            r1 += dr;\r\n            g1 += dg;\r\n            b1 += db;\r\n        }\r\n        return sal;\r\n    };\r\n    /**\r\n     * Metodo para Generar el contraste de una Imagen\r\n     * @img  ImageType tipo de imagen donde se guarda una matriz tridimencional\r\n     * @return number[][][] es la imagen de salida con contraste\r\n     */\r\n    MathImg.changeContraste = function (img, valor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        //\r\n        var cR, cG, cB;\r\n        var contraste;\r\n        contraste = (valor + 100) / 100;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                cR = ((((arrImage[0][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\r\n                if (cR > 255)\r\n                    cR = 255;\r\n                if (cR < 0)\r\n                    cR = 0;\r\n                sal[0][i][j] = cR;\r\n                cG = ((((arrImage[1][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\r\n                if (cG > 255)\r\n                    cG = 255;\r\n                if (cG < 0)\r\n                    cG = 0;\r\n                sal[1][i][j] = cG;\r\n                cB = ((((arrImage[2][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\r\n                if (cB > 255)\r\n                    cB = 255;\r\n                if (cB < 0)\r\n                    cB = 0;\r\n                sal[2][i][j] = cB;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.pow = function (img, power) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.pow(arrImage[0][i][j], power);\r\n                sal[1][i][j] = Math.pow(arrImage[1][i][j], power);\r\n                sal[2][i][j] = Math.pow(arrImage[2][i][j], power);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toCos = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.cos(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.cos(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.cos(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toSubtract = function (img, escalar) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] - escalar;\r\n                sal[1][i][j] = arrImage[1][i][j] - escalar;\r\n                sal[2][i][j] = arrImage[2][i][j] - escalar;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toMultiplication = function (img, valor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = valor * arrImage[0][i][j];\r\n                sal[1][i][j] = valor * arrImage[1][i][j];\r\n                sal[2][i][j] = valor * arrImage[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toSine = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.sin(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.sin(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.sin(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toAdd = function (img, sumar) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] + sumar;\r\n                sal[1][i][j] = arrImage[1][i][j] + sumar;\r\n                sal[2][i][j] = arrImage[2][i][j] + sumar;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDividir = function (img, dividir) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] + dividir;\r\n                sal[1][i][j] = arrImage[1][i][j] + dividir;\r\n                sal[2][i][j] = arrImage[2][i][j] + dividir;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toSqrt = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.sqrt(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.sqrt(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.sqrt(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toTan = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.tan(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.tan(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.tan(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.addImg = function (img, img2) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        var arrImage2 = img2.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] + arrImage2[0][i][j];\r\n                sal[1][i][j] = arrImage[1][i][j] + arrImage2[1][i][j];\r\n                sal[2][i][j] = arrImage[2][i][j] + arrImage2[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.marcaAguaCentro = function (img, img2, porc) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage;\r\n        var arrImage2;\r\n        var width;\r\n        var height;\r\n        var sal;\r\n        var midW, midH;\r\n        var midsmallW, midsmallH;\r\n        var widthsmall, heightsmall;\r\n        if (img.getWidth() > img2.getWidth()) {\r\n            arrImage = img.getArrayImg();\r\n            arrImage2 = img2.getArrayImg();\r\n            width = img.getWidth();\r\n            height = img.getHeight();\r\n            widthsmall = img2.getWidth();\r\n            heightsmall = img2.getHeight();\r\n            sal = this.initArray(img.getWidth(), img.getHeight());\r\n        }\r\n        else {\r\n            arrImage2 = img.getArrayImg();\r\n            arrImage = img2.getArrayImg();\r\n            width = img2.getWidth();\r\n            height = img2.getHeight();\r\n            widthsmall = img.getWidth();\r\n            heightsmall = img.getHeight();\r\n            sal = this.initArray(img2.getWidth(), img2.getHeight());\r\n        }\r\n        midW = Math.floor(width / 2);\r\n        midH = Math.floor(height / 2);\r\n        midsmallW = Math.floor(widthsmall / 2);\r\n        midsmallH = Math.floor(heightsmall / 2);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                sal[0][i][j] = arrImage[0][i][j];\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                sal[2][i][j] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        for (var i = 0; i < heightsmall; i++) {\r\n            for (var j = 0; j < widthsmall; j++) {\r\n                sal[0][midH - midsmallH + i][midW - midsmallW + j] += arrImage2[0][i][j] * porc;\r\n                sal[1][midH - midsmallH + i][midW - midsmallW + j] += arrImage2[1][i][j] * porc;\r\n                sal[2][midH - midsmallH + i][midW - midsmallW + j] += arrImage2[2][i][j] * porc;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.marcaAguaArray = function (img, img2, porc) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage;\r\n        var arrImage2;\r\n        var width;\r\n        var height;\r\n        var sal;\r\n        var widthsmall, heightsmall;\r\n        var noVecesAncho, noVecesAlto;\r\n        if (img.getWidth() > img2.getWidth()) {\r\n            arrImage = img.getArrayImg();\r\n            arrImage2 = img2.getArrayImg();\r\n            width = img.getWidth();\r\n            height = img.getHeight();\r\n            widthsmall = img2.getWidth();\r\n            heightsmall = img2.getHeight();\r\n            sal = this.initArray(img.getWidth(), img.getHeight());\r\n        }\r\n        else {\r\n            arrImage2 = img.getArrayImg();\r\n            arrImage = img2.getArrayImg();\r\n            width = img2.getWidth();\r\n            height = img2.getHeight();\r\n            widthsmall = img.getWidth();\r\n            heightsmall = img.getHeight();\r\n            sal = this.initArray(img2.getWidth(), img2.getHeight());\r\n        }\r\n        noVecesAncho = Math.floor(width / widthsmall);\r\n        noVecesAlto = Math.floor(height / heightsmall);\r\n        console.log(width, height);\r\n        console.log(sal);\r\n        for (var w = 0; w <= noVecesAlto; w++) {\r\n            for (var v = 0; v <= noVecesAncho; v++) {\r\n                for (var i = 0; i < heightsmall; i++) {\r\n                    for (var j = 0; j < widthsmall; j++) {\r\n                        if ((i + w * heightsmall) < height && (j + v * widthsmall) < width) {\r\n                            sal[0][i + w * heightsmall][j + v * widthsmall] = arrImage[0][i + w * heightsmall][j + v * widthsmall] + arrImage2[0][i][j] * porc;\r\n                            sal[1][i + w * heightsmall][j + v * widthsmall] = arrImage[1][i + w * heightsmall][j + v * widthsmall] + arrImage2[1][i][j] * porc;\r\n                            sal[2][i + w * heightsmall][j + v * widthsmall] = arrImage[2][i + w * heightsmall][j + v * widthsmall] + arrImage2[2][i][j] * porc;\r\n                        }\r\n                        //else\r\n                        // break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(sal);\r\n        return sal;\r\n    };\r\n    MathImg.hist = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = new Array(3);\r\n        sal[0] = new Array(256);\r\n        sal[1] = new Array(256);\r\n        sal[2] = new Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            sal[0][i] = 0;\r\n            sal[1][i] = 0;\r\n            sal[2][i] = 0;\r\n        }\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][arrImage[0][i][j]]++;\r\n                sal[1][arrImage[1][i][j]]++;\r\n                sal[2][arrImage[2][i][j]]++;\r\n            }\r\n        }\r\n        //console.log(sal[0])\r\n        return sal;\r\n    };\r\n    MathImg.histAcum = function (h) {\r\n        //variable donde guardamos la salida\r\n        var hist = new Array(3);\r\n        hist[0] = new Array(256);\r\n        hist[1] = new Array(256);\r\n        hist[2] = new Array(256);\r\n        hist[0][0] = h[0][0];\r\n        hist[1][0] = h[1][0];\r\n        hist[2][0] = h[2][0];\r\n        for (var i = 1; i < h[0].length; i++) {\r\n            hist[0][i] = hist[0][i - 1] + h[0][i];\r\n            hist[1][i] = hist[1][i - 1] + h[1][i];\r\n            hist[2][i] = hist[2][i - 1] + h[2][i];\r\n            //if(i==255)\r\n        }\r\n        return hist;\r\n    };\r\n    MathImg.ecualizar = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var h = this.hist(img);\r\n        var hA = this.histAcum(h);\r\n        var fT;\r\n        fT = new Array(3);\r\n        fT[0] = new Array(256);\r\n        fT[2] = new Array(256);\r\n        fT[1] = new Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            fT[0][i] = Math.floor(hA[0][i] * 255.0 / hA[0][255]);\r\n            fT[1][i] = Math.floor(hA[1][i] * 255.0 / hA[1][255]);\r\n            fT[2][i] = Math.floor(hA[2][i] * 255.0 / hA[2][254]);\r\n        }\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = fT[0][arrImage[0][i][j]];\r\n                sal[1][i][j] = fT[1][arrImage[1][i][j]];\r\n                sal[2][i][j] = fT[2][arrImage[2][i][j]];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.erosionar = function (img, vec8) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        var vecinos, valorComp = 4;\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos == valorComp) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.dilatar = function (img, vec8) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        var vecinos, valorComp = 4;\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.apertura = function (img, vec8) {\r\n        var arrImage = this.erosionar(img, vec8);\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var vecinos, valorComp = 4;\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.cierre = function (img, vec8) {\r\n        var arrImage = this.dilatar(img, vec8);\r\n        var vecinos, valorComp = 4;\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos == valorComp) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.fromRGBtoHSI = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var hue;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                arrImage[0][i][j] /= 255.0;\r\n                arrImage[1][i][j] /= 255.0;\r\n                arrImage[2][i][j] /= 255.0;\r\n                hue = 180 / Math.PI * Math.acos(0.5 * ((arrImage[0][i][j] - arrImage[1][i][j]) + (arrImage[0][i][j] - arrImage[2][i][j])) /\r\n                    Math.sqrt(Math.pow(arrImage[0][i][j] - arrImage[1][i][j], 2) + (arrImage[0][i][j] - arrImage[2][i][j]) * (arrImage[1][i][j] - arrImage[2][i][j])));\r\n                sal[0][i][j] = arrImage[2][i][j] > arrImage[1][i][j] ? 360 - hue : hue;\r\n                sal[1][i][j] = 1 - (3 * Math.min(arrImage[0][i][j], arrImage[1][i][j], arrImage[2][i][j])) / (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]);\r\n                sal[2][i][j] = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.fromHSItoRGB = function (arrImage) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var width;\r\n        var height;\r\n        height = arrImage[0].length;\r\n        width = arrImage[0][0].length;\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        var hue;\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                //H de 0 - 120\r\n                if (arrImage[0][i][j] >= 0 && arrImage[0][i][j] < 120) {\r\n                    sal[0][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j]))) /\r\n                        (Math.cos(this.toRad(60 - arrImage[0][i][j]))));\r\n                    sal[2][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\r\n                    sal[1][i][j] = 3 * arrImage[2][i][j] - sal[0][i][j] - sal[2][i][j];\r\n                }\r\n                else if (arrImage[0][i][j] >= 120 && arrImage[0][i][j] < 240) {\r\n                    sal[0][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\r\n                    sal[1][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j] - 120))) /\r\n                        (Math.cos(this.toRad(180 - arrImage[0][i][j]))));\r\n                    sal[2][i][j] = 3 * arrImage[2][i][j] - sal[0][i][j] - sal[1][i][j];\r\n                }\r\n                else if (arrImage[0][i][j] >= 240 && arrImage[0][i][j] < 360) {\r\n                    sal[1][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\r\n                    sal[2][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j] - 240))) /\r\n                        (Math.cos(this.toRad(300 - arrImage[0][i][j]))));\r\n                    sal[0][i][j] = 3 * arrImage[2][i][j] - sal[1][i][j] - sal[2][i][j];\r\n                }\r\n                sal[0][i][j] *= 255.0;\r\n                sal[1][i][j] *= 255.0;\r\n                sal[2][i][j] *= 255.0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toRad = function (grados) {\r\n        return (grados * Math.PI / 180);\r\n    };\r\n    MathImg.falseColorByHue = function (arrImage, hue, newHue) {\r\n        var width;\r\n        var height;\r\n        height = arrImage[0].length;\r\n        width = arrImage[0][0].length;\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        var range = 25;\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                //si hue es menor a cero estamos en el rango de 360 bajos, por lo que hay que revisar esos valores\r\n                if ((hue - range) < 0) {\r\n                    if (Math.abs(hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else if ((360 + hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else {\r\n                        sal[0][i][j] = arrImage[0][i][j];\r\n                    }\r\n                }\r\n                else if ((hue + range) > 360) {\r\n                    if (Math.abs(hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else if ((-360 + hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else {\r\n                        sal[0][i][j] = arrImage[0][i][j];\r\n                    }\r\n                } // si no se rebasa del cero\r\n                else if (Math.abs(hue - arrImage[0][i][j]) < range) {\r\n                    sal[0][i][j] = newHue;\r\n                } // si no se rebasa del rango\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                sal[2][i][j] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    //aqui va ir el codigo de la trasnformacion bilineal  \r\n    MathImg.bilineal = function () {\r\n        return 0;\r\n    };\r\n    MathImg.pulso = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        //var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var width = img._width;\r\n        var height = img._height;\r\n        var sal = this.initArray(width, height);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        sal[0][Math.floor(height / 2)][Math.floor(width / 2)] = 255;\r\n        sal[1][Math.floor(height / 2)][Math.floor(width / 2)] = 255;\r\n        sal[2][Math.floor(height / 2)][Math.floor(width / 2)] = 255;\r\n        return sal;\r\n    };\r\n    MathImg.ruido = function (width, height) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        //var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                sal[0][i][j] = (Math.random() * 256) > 128 ? 255 : 0;\r\n                sal[1][i][j] = sal[0][i][j];\r\n                sal[2][i][j] = sal[0][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.rampaX = function (width, height) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        //var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                sal[0][i][j] = j;\r\n                sal[1][i][j] = j;\r\n                sal[2][i][j] = j;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.rampaY = function (width, height) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        //var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                sal[0][i][j] = i;\r\n                sal[1][i][j] = i;\r\n                sal[2][i][j] = i;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.escalar = function (img, factor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var newHeight = Math.floor(img.getHeight() * factor), newWitdh = Math.floor(img.getWidth() * factor);\r\n        var sal = this.initArray(newWitdh, newHeight);\r\n        for (var i = 0; i < newHeight; i++) {\r\n            for (var j = 0; j < newWitdh; j++) {\r\n                sal[0][i][j] = arrImage[0][Math.floor(i / factor)][Math.floor(j / factor)];\r\n                sal[1][i][j] = arrImage[1][Math.floor(i / factor)][Math.floor(j / factor)];\r\n                sal[2][i][j] = arrImage[2][Math.floor(i / factor)][Math.floor(j / factor)];\r\n            }\r\n        }\r\n        /*\r\n        for (let i = 0; i < img.getHeight(); i++) {\r\n          for (let j = 0; j < img.getWidth(); j++) {\r\n            sal[0][Math.floor(i*factor)][Math.floor(j*factor)] = arrImage[0][i][j] ;\r\n            sal[1][Math.floor(i*factor)][Math.floor(j*factor)] = arrImage[1][i][j] ;\r\n            sal[2][Math.floor(i*factor)][Math.floor(j*factor)] = arrImage[2][i][j] ;\r\n          }\r\n        }*/\r\n        return sal;\r\n    };\r\n    MathImg.rotar = function (img, angulo) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var newHeight = img.getHeight(), newWitdh = img.getWidth();\r\n        var sal = this.initArray(newWitdh, newHeight);\r\n        var xP = newWitdh / 2, yP = newHeight / 2;\r\n        var phi = (angulo * Math.PI / 180), c = Math.cos(phi), s = Math.sin(phi), r11 = c, r12 = s, r21 = -s, r22 = c, r31 = -xP * c + yP * s + xP, r32 = -xP * s - yP * c + yP;\r\n        var nX, nY;\r\n        for (var i = 0; i < newHeight; i++) {\r\n            for (var j = 0; j < newWitdh; j++) {\r\n                nX = Math.floor(j * r11 + i * r21 + r31);\r\n                nY = Math.floor(j * r12 + i * r22 + r32);\r\n                if ((nX >= 0 && nX < newWitdh) && (nY >= 0 && nY < newHeight)) {\r\n                    sal[0][i][j] = arrImage[0][nY][nX];\r\n                    sal[1][i][j] = arrImage[1][nY][nX];\r\n                    sal[2][i][j] = arrImage[2][nY][nX];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.shearingX = function (img, factor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var newHeight = img.getHeight(), newWitdh = img.getWidth();\r\n        var sal = this.initArray(newWitdh, newHeight);\r\n        console.log(newWitdh, newHeight);\r\n        for (var i = 0; i < newHeight; i++) {\r\n            for (var j = 0; j < newWitdh; j++) {\r\n                if ((j + Math.floor(factor * i)) < newWitdh) {\r\n                    sal[0][i][j + Math.floor(factor * i)] = arrImage[0][i][j];\r\n                    sal[1][i][j + Math.floor(factor * i)] = arrImage[1][i][j];\r\n                    sal[2][i][j + Math.floor(factor * i)] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.shearingY = function (img, factor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var newHeight = img.getHeight(), newWitdh = img.getWidth();\r\n        var sal = this.initArray(newWitdh, newHeight);\r\n        console.log(newWitdh, newHeight);\r\n        for (var i = 0; i < newHeight; i++) {\r\n            for (var j = 0; j < newWitdh; j++) {\r\n                if ((i + Math.floor(factor * j)) < newHeight) {\r\n                    sal[0][i + Math.floor(factor * j)][j] = arrImage[0][i][j];\r\n                    sal[1][i + Math.floor(factor * j)][j] = arrImage[1][i][j];\r\n                    sal[2][i + Math.floor(factor * j)][j] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    return MathImg;\r\n}());\r\nexports.MathImg = MathImg;\r\n\n\n//# sourceURL=webpack://processtype/./src/MathImg.js?");

/***/ }),

/***/ "./src/canvasLocal.js":
/*!****************************!*\
  !*** ./src/canvasLocal.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nexports.__esModule = true;\r\nexports.CanvasLocal = void 0;\r\nvar CanvasLocal = /** @class */ (function () {\r\n    function CanvasLocal(g, canvas, h) {\r\n        this.graphics = g;\r\n        this.rWidth = 12;\r\n        this.rHeight = 12;\r\n        this.maxX = canvas.width - 1;\r\n        this.maxY = canvas.height - 1;\r\n        this.pixelSize = Math.max(this.rWidth / this.maxX, this.rHeight / this.maxY);\r\n        this.centerX = this.maxX / 12;\r\n        this.centerY = this.maxY / 12 * 10;\r\n        this.hist = h;\r\n    }\r\n    CanvasLocal.prototype.iX = function (x) { return Math.round(this.centerX + x / this.pixelSize); };\r\n    CanvasLocal.prototype.iY = function (y) { return Math.round(this.centerY - y / this.pixelSize); };\r\n    CanvasLocal.prototype.drawLine = function (x1, y1, x2, y2) {\r\n        this.graphics.beginPath();\r\n        this.graphics.moveTo(x1, y1);\r\n        this.graphics.lineTo(x2, y2);\r\n        this.graphics.closePath();\r\n        this.graphics.stroke();\r\n    };\r\n    CanvasLocal.prototype.drawRmboide = function (x1, y1, x2, y2, x3, y3, x4, y4, color) {\r\n        // Color de relleno\r\n        this.graphics.fillStyle = color;\r\n        // Comenzamos la ruta de dibujo, o path\r\n        this.graphics.beginPath();\r\n        // Mover a la esquina superior izquierda\r\n        this.graphics.moveTo(x1, y1);\r\n        // Dibujar la línea hacia la derecha\r\n        this.graphics.lineTo(x2, y2);\r\n        // Ahora la que va hacia abajo\r\n        this.graphics.lineTo(x3, y3); // A 80 porque esa es la altura\r\n        // La que va hacia la izquierda\r\n        this.graphics.lineTo(x4, y4);\r\n        // Y dejamos que la última línea la dibuje JS\r\n        this.graphics.closePath();\r\n        // Hacemos que se dibuje\r\n        this.graphics.stroke();\r\n        // Lo rellenamos\r\n        this.graphics.fill();\r\n    };\r\n    CanvasLocal.prototype.fx = function (x) {\r\n        return Math.sin(x * 2.5);\r\n    };\r\n    CanvasLocal.prototype.paint = function () {\r\n        var max = this.maxHist();\r\n        var factor = 6 / max;\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(10), this.iY(0));\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(0), this.iY(8));\r\n        this.graphics.strokeStyle = 'red';\r\n        for (var i = 0; i < 254; i++) {\r\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[0][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[0][i + 1] * factor));\r\n        }\r\n        this.graphics.strokeStyle = 'green';\r\n        for (var i = 0; i < 254; i++) {\r\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[1][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[1][i + 1] * factor));\r\n        }\r\n        this.graphics.strokeStyle = 'blue';\r\n        for (var i = 0; i < 254; i++) {\r\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[2][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[2][i + 1] * factor));\r\n        }\r\n        /*this.graphics.strokeStyle = 'black';\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(8), this.iY(0));\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(0), this.iY(6));\r\n        \r\n       */\r\n    };\r\n    CanvasLocal.prototype.maxHist = function () {\r\n        var max = this.hist[0][0];\r\n        for (var i = 0; i < 255; i++) {\r\n            if (this.hist[0][i] > max)\r\n                max = this.hist[0][i];\r\n        }\r\n        return max;\r\n    };\r\n    return CanvasLocal;\r\n}());\r\nexports.CanvasLocal = CanvasLocal;\r\n\n\n//# sourceURL=webpack://processtype/./src/canvasLocal.js?");

/***/ }),

/***/ "./src/filtros.js":
/*!************************!*\
  !*** ./src/filtros.js ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nexports.__esModule = true;\r\nexports.muestraTamanios = void 0;\r\nvar _1 = __webpack_require__(/*! . */ \"./src/index.js\");\r\nvar muestraTamanios = function () {\r\n    console.log(\"EL ALTO CANVAS : \".concat(_1.TamCanvasHeight, \" EL ANCHO CANVAS : \").concat(_1.TamCanvasWidth));\r\n};\r\nexports.muestraTamanios = muestraTamanios;\r\n\n\n//# sourceURL=webpack://processtype/./src/filtros.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nexports.__esModule = true;\r\nexports.TamCanvasHeightFic = exports.TamCanvasWidthFic = exports.TamCanvasHeight = exports.TamCanvasWidth = exports.NumnewCanHeight = exports.NumnewCanWidth = exports.canvas = void 0;\r\nvar ImageLocal_1 = __webpack_require__(/*! ./ImageLocal */ \"./src/ImageLocal.js\");\r\nvar ImageType_1 = __webpack_require__(/*! ./ImageType */ \"./src/ImageType.js\");\r\nvar ImagenLocal_1 = __webpack_require__(/*! ./ImagenLocal */ \"./src/ImagenLocal.js\");\r\nvar MathImg_1 = __webpack_require__(/*! ./MathImg */ \"./src/MathImg.js\");\r\nvar filtros_1 = __webpack_require__(/*! ./filtros */ \"./src/filtros.js\");\r\nvar particle_1 = __webpack_require__(/*! ./particle */ \"./src/particle.js\");\r\nvar particle_2 = __webpack_require__(/*! ./particle */ \"./src/particle.js\");\r\nvar canvasLocal_1 = __webpack_require__(/*! ./canvasLocal */ \"./src/canvasLocal.js\");\r\n(0, ImagenLocal_1.Sepia)();\r\nexports.canvas = document.getElementById(\"img1\");\r\nvar canvasR = document.getElementById(\"Result\");\r\nvar canvasO = document.getElementById(\"imgOrigin\");\r\nvar ctx = exports.canvas.getContext(\"2d\", { willReadFrequently: true });\r\nvar ctx2 = canvasR.getContext(\"2d\", { willReadFrequently: true });\r\nvar ctxO = canvasO.getContext(\"2d\", { willReadFrequently: true });\r\nvar image = document.createElement(\"img\");\r\nvar canvasFic = document.createElement('canvas');\r\nvar ctxFic = canvasFic.getContext(\"2d\", { willReadFrequently: true });\r\nvar imgLocal = new ImageLocal_1.ImageLocal(ctx);\r\nconsole.log(document.getElementsByClassName(\"Bca apli\"));\r\nexports.NumnewCanWidth = 0;\r\nexports.NumnewCanHeight = 0;\r\nvar eventOnchangesInput = document.getElementById(\"file\");\r\nvar $BtnSave = document.getElementById(\"save-file\");\r\nexports.TamCanvasWidth = 979;\r\nexports.TamCanvasHeight = 495;\r\ncanvasFic.width = 979;\r\ncanvasFic.height = 495;\r\ncanvasO.width = 979;\r\ncanvasO.height = 495;\r\nexports.TamCanvasWidthFic = canvasFic.width = 979;\r\nexports.TamCanvasHeightFic = canvasFic.height = 495;\r\n(0, filtros_1.muestraTamanios)();\r\neventOnchangesInput.addEventListener(\"change\", image1Canvas);\r\nfunction image1Canvas() {\r\n    var image1 = new Image();\r\n    var file = document.querySelector('input[type=file]');\r\n    var fi = file === null || file === void 0 ? void 0 : file.files[0];\r\n    var reader = new FileReader();\r\n    reader.addEventListener('load', function () {\r\n        image1.src = reader.result;\r\n        image = image1;\r\n        ctx.clearRect(0, 0, exports.canvas.width, exports.canvas.height);\r\n        ctxFic.clearRect(0, 0, exports.canvas.width, exports.canvas.height);\r\n        ctxO === null || ctxO === void 0 ? void 0 : ctxO.clearRect(0, 0, canvasO.width, canvasO.height);\r\n        image1.onload = function () {\r\n            var ancho = image1.width;\r\n            var alto = image1.height;\r\n            imageSave(image1, ancho, alto);\r\n            if (alto === ancho) {\r\n                if (ancho < exports.TamCanvasWidth && alto < exports.TamCanvasHeight) {\r\n                    var porcentajeY = (alto * 100) / ancho;\r\n                    var tamWidth = ancho;\r\n                    var tamHeight = alto;\r\n                    var posicionX = (exports.TamCanvasWidth - tamWidth) / 2;\r\n                    var posicionY = (exports.TamCanvasHeight - tamHeight) / 2;\r\n                    exports.canvas.width = tamWidth;\r\n                    exports.canvas.height = tamHeight;\r\n                    canvasO.width = tamWidth;\r\n                    canvasO.height = tamHeight;\r\n                    exports.NumnewCanWidth = Number(tamWidth.toFixed(0));\r\n                    exports.NumnewCanHeight = Number(tamHeight.toFixed(0));\r\n                    exports.canvas.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    exports.canvas.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    canvasO.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    canvasO.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxO === null || ctxO === void 0 ? void 0 : ctxO.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxFic === null || ctxFic === void 0 ? void 0 : ctxFic.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                }\r\n                else {\r\n                    var posicionX = (exports.TamCanvasWidth - (exports.TamCanvasWidth / 2.3)) / 2;\r\n                    var posicionY = (exports.TamCanvasHeight - (exports.TamCanvasWidth / 2.3)) / 2;\r\n                    var tamWidth = exports.TamCanvasWidth / 2.3;\r\n                    var tamHeight = exports.TamCanvasWidth / 2.3;\r\n                    exports.canvas.width = tamWidth;\r\n                    exports.canvas.height = tamHeight;\r\n                    exports.canvas.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    exports.canvas.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    canvasO.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    canvasO.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    exports.NumnewCanWidth = Number(tamWidth.toFixed(0));\r\n                    exports.NumnewCanHeight = Number(tamHeight.toFixed(0));\r\n                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxO === null || ctxO === void 0 ? void 0 : ctxO.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxFic === null || ctxFic === void 0 ? void 0 : ctxFic.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                }\r\n            }\r\n            else if (alto > ancho) {\r\n                console.log(\"ENTRA EN Alto :\".concat(alto, \" > Ancho :\").concat(ancho));\r\n                if (ancho < exports.TamCanvasWidth && alto < exports.TamCanvasHeight) {\r\n                    var porcentajeY = (alto * 100) / ancho;\r\n                    var tamWidth = ancho;\r\n                    var tamHeight = alto;\r\n                    var posicionX = (exports.TamCanvasWidth - tamWidth) / 2;\r\n                    var posicionY = (exports.TamCanvasHeight - tamHeight) / 2;\r\n                    exports.canvas.width = tamWidth;\r\n                    exports.canvas.height = tamHeight;\r\n                    canvasO.width = tamWidth;\r\n                    canvasO.height = tamHeight;\r\n                    exports.NumnewCanWidth = Number(tamWidth.toFixed(0));\r\n                    exports.NumnewCanHeight = Number(tamHeight.toFixed(0));\r\n                    exports.canvas.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    exports.canvas.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    canvasO.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    canvasO.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxO === null || ctxO === void 0 ? void 0 : ctxO.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxFic === null || ctxFic === void 0 ? void 0 : ctxFic.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                }\r\n                else {\r\n                    var porcentajeX = (ancho * 100) / alto;\r\n                    var tamHeight = (exports.TamCanvasHeight) - 50;\r\n                    var tamWidth = (tamHeight * porcentajeX) / 100;\r\n                    var posicionX = (exports.TamCanvasWidth - tamWidth) / 2;\r\n                    var posicionY = (exports.TamCanvasHeight - tamHeight) / 2;\r\n                    exports.canvas.width = tamWidth;\r\n                    exports.canvas.height = tamHeight;\r\n                    canvasO.width = tamWidth;\r\n                    canvasO.height = tamHeight;\r\n                    exports.NumnewCanWidth = Number(tamWidth.toFixed(0));\r\n                    exports.NumnewCanHeight = Number(tamHeight.toFixed(0));\r\n                    exports.canvas.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    exports.canvas.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    canvasO.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    canvasO.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxO === null || ctxO === void 0 ? void 0 : ctxO.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxFic === null || ctxFic === void 0 ? void 0 : ctxFic.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                }\r\n            }\r\n            else if (ancho > alto) {\r\n                //console.log(`ENTRA EN Ancho :${ancho} > Alto :${alto}`)\r\n                if (ancho < exports.TamCanvasWidth && alto < exports.TamCanvasHeight) {\r\n                    var porcentajeY = (alto * 100) / ancho;\r\n                    var tamWidth = ancho;\r\n                    var tamHeight = alto;\r\n                    var posicionX = (exports.TamCanvasWidth - tamWidth) / 2;\r\n                    var posicionY = (exports.TamCanvasHeight - tamHeight) / 2;\r\n                    exports.canvas.width = tamWidth;\r\n                    exports.canvas.height = tamHeight;\r\n                    canvasO.width = tamWidth;\r\n                    canvasO.height = tamHeight;\r\n                    exports.NumnewCanWidth = Number(tamWidth.toFixed(0));\r\n                    exports.NumnewCanHeight = Number(tamHeight.toFixed(0));\r\n                    exports.canvas.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    exports.canvas.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    canvasO.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    canvasO.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxO === null || ctxO === void 0 ? void 0 : ctxO.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxFic === null || ctxFic === void 0 ? void 0 : ctxFic.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                }\r\n                else {\r\n                    var porcentajeY = (alto * 100) / ancho;\r\n                    var tamWidth = (exports.TamCanvasWidth) - 340;\r\n                    var tamHeight = (tamWidth * porcentajeY) / 100;\r\n                    var posicionX = (exports.TamCanvasWidth - tamWidth) / 2;\r\n                    var posicionY = (exports.TamCanvasHeight - tamHeight) / 2;\r\n                    exports.canvas.width = tamWidth;\r\n                    exports.canvas.height = tamHeight;\r\n                    canvasO.width = tamWidth;\r\n                    canvasO.height = tamHeight;\r\n                    exports.NumnewCanWidth = Number(tamWidth.toFixed(0));\r\n                    exports.NumnewCanHeight = Number(tamHeight.toFixed(0));\r\n                    exports.canvas.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    exports.canvas.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    canvasO.style.marginLeft = \"\".concat(posicionX, \"px\");\r\n                    canvasO.style.marginTop = \"\".concat(posicionY, \"px\");\r\n                    ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxO === null || ctxO === void 0 ? void 0 : ctxO.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                    ctxFic === null || ctxFic === void 0 ? void 0 : ctxFic.drawImage(image1, 0, 0, tamWidth, tamHeight);\r\n                }\r\n            }\r\n            exports.canvas.addEventListener('mousemove', handleMouse);\r\n            /*[0][0][0][0][0][0][0][0][0] --------Opciones basicas------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op1-1\").addEventListener('click', convertirAGris, false);\r\n            document.getElementById(\"op1-2\").addEventListener('click', convertirANegativo, false);\r\n            document.getElementById(\"op1-3\").addEventListener('click', convertirARojo, false);\r\n            document.getElementById(\"op1-4\").addEventListener('click', convertirAVerde, false);\r\n            document.getElementById(\"op1-5\").addEventListener('click', convertirAAzul, false);\r\n            document.getElementById(\"op1-6\").addEventListener('click', convertirTricolor, false);\r\n            document.getElementById(\"op1-7\").addEventListener('click', correccionGamma, false);\r\n            document.getElementById(\"op1-8\").addEventListener('click', umbralizado, false);\r\n            document.getElementById(\"op1-9\").addEventListener('click', umbral2limites, false);\r\n            document.getElementById(\"op1-10\").addEventListener('click', desfaseX, false);\r\n            document.getElementById(\"op1-11\").addEventListener('click', desfaseY, false);\r\n            document.getElementById(\"op1-12\").addEventListener('click', desfaseD, false);\r\n            /*[0][0][0][0][0][0][0][0][0] --------Opciones de edición ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op2-1\").addEventListener('click', colorGradienteX, false);\r\n            document.getElementById(\"op2-2\").addEventListener('click', colorGradienteY, false);\r\n            document.getElementById(\"op2-3\").addEventListener('click', opchangeContraste, false);\r\n            document.getElementById(\"op2-4\").addEventListener('click', changeBrightness, false);\r\n            document.getElementById(\"op2-5\").addEventListener('click', ecualizado, false);\r\n            document.getElementById(\"op2-6\").addEventListener('click', opchangeFalsoColor, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones Matemáticas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op3-1\").addEventListener('click', opgetPow, false);\r\n            document.getElementById(\"op3-2\").addEventListener('click', sqrt, false);\r\n            /* Trigonometricas */\r\n            document.getElementById(\"cos\").addEventListener('click', coseno, false);\r\n            document.getElementById(\"sin\").addEventListener('click', funcionSine, false);\r\n            document.getElementById(\"tan\").addEventListener('click', tan, false);\r\n            /* Ariméticas */\r\n            document.getElementById(\"sum\").addEventListener('click', add, false);\r\n            document.getElementById(\"res\").addEventListener('click', subtract, false);\r\n            document.getElementById(\"mult\").addEventListener('click', multiplicacion, false);\r\n            document.getElementById(\"divi\").addEventListener('click', div, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones imagenes ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"SumaIguales\").addEventListener(\"change\", sumaImg, false);\r\n            document.getElementById(\"SumaReesc\").addEventListener('change', reescala, false);\r\n            document.getElementById(\"MArray\").addEventListener('click', marcaAguaArray, false);\r\n            document.getElementById(\"op4-5\").addEventListener('click', marcaAguaCentro, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones Nuevas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op5-1\").addEventListener('click', rain, false);\r\n            document.getElementById(\"op5-2\").addEventListener('click', rain2, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones Morofologicas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op7-1\").addEventListener('click', dilatarImg, false);\r\n            document.getElementById(\"op7-2\").addEventListener('click', erosionarImg, false);\r\n            document.getElementById(\"op7-3\").addEventListener('click', aperturaImg, false);\r\n            document.getElementById(\"op7-4\").addEventListener('click', cierreImg, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones Sintéticas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op8-1\").addEventListener('click', generarPulso, false);\r\n            document.getElementById(\"op8-2\").addEventListener('click', generarRuido, false);\r\n            document.getElementById(\"op8-3\").addEventListener('click', generarRampaX, false);\r\n            document.getElementById(\"op8-4\").addEventListener('click', generarRampaY, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones Geometricas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"op9-1\").addEventListener('click', escalarImagen2, false);\r\n            document.getElementById(\"op9-2\").addEventListener('click', rotarImagen2, false);\r\n            document.getElementById(\"op9-3\").addEventListener('click', shearingX, false);\r\n            document.getElementById(\"op9-4\").addEventListener('click', shearingY, false);\r\n            /*[0][0][0][0][0][0][0][0][0] -------- Opciones Histograma ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n            document.getElementById(\"histogramas\").addEventListener('click', histogramas, false);\r\n        };\r\n    }, false);\r\n    if (fi) {\r\n        reader.readAsDataURL(fi);\r\n    }\r\n}\r\nfunction cambiosInputValor(e, id) {\r\n    var input = document.getElementById(id);\r\n    input.value = e.currentTarget.value;\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones de Texto ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\ndocument.getElementById(\"op6-1\").addEventListener('click', textEfects, false);\r\n/*[0][0][0][0][0][0][0][0][0] --------Opciones basicas------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction convertirAGris(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toGray(imagenSal));\r\n}\r\nfunction convertirANegativo(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toNegative(imagenSal));\r\n}\r\nfunction convertirARojo(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toRed(imagenSal));\r\n}\r\nfunction convertirAVerde(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toGreen(imagenSal));\r\n}\r\nfunction convertirAAzul(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toBlue(imagenSal));\r\n}\r\n//este codigo se agreo el 4 de abril de 2022\r\nfunction convertirTricolor(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toTricolor(imagenSal));\r\n}\r\nfunction correccionGamma(evt) {\r\n    document.getElementsByClassName(\"range2\")[0].addEventListener(\"change\", function (e) {\r\n        gamma(e);\r\n        cambiosInputValor(e, \"ValorGamma1\");\r\n    });\r\n    document.getElementsByClassName(\"range2\")[1].addEventListener(\"change\", function (e) {\r\n        gamma(e);\r\n        cambiosInputValor(e, \"ValorGamma2\");\r\n    });\r\n    document.getElementsByClassName(\"range2\")[2].addEventListener(\"change\", function (e) {\r\n        gamma(e);\r\n        cambiosInputValor(e, \"ValorGamma3\");\r\n    });\r\n}\r\nfunction gamma(e) {\r\n    var u1 = document.getElementsByClassName(\"range2\")[0];\r\n    var u2 = document.getElementsByClassName(\"range2\")[1];\r\n    var u3 = document.getElementsByClassName(\"range2\")[2];\r\n    var valor = [parseInt(u1.value), parseInt(u2.value), parseInt(u3.value)];\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.correctionGamma(imagenSal, valor));\r\n}\r\nfunction umbral2limites(evt) {\r\n    console.log(document.getElementById(\"ValorGamma2\"));\r\n    document.getElementsByClassName(\"rangeUmblar2\")[0].addEventListener(\"change\", function (e) {\r\n        umbral2(e);\r\n        cambiosInputValor(e, \"ValorGamma2e1\");\r\n    });\r\n    document.getElementsByClassName(\"rangeUmblar2\")[1].addEventListener(\"change\", function (e) {\r\n        umbral2(e);\r\n        cambiosInputValor(e, \"ValorGamma2e2\");\r\n    });\r\n}\r\nfunction umbral2(e) {\r\n    var u1 = document.getElementsByClassName(\"rangeUmblar2\")[0];\r\n    var u2 = document.getElementsByClassName(\"rangeUmblar2\")[1];\r\n    var valor = [parseInt(u1.value), parseInt(u2.value)];\r\n    console.log(valor);\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toUmbral2limites(imagenSal, valor));\r\n}\r\nfunction umbralizado(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputUmbral1\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var des = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorUmbral1\");\r\n        var valor = des;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toUmbral(imagenSal, valor));\r\n    });\r\n}\r\nfunction desfaseX(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputDesX\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var des = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValDesX\");\r\n        var valor = des;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.toDesfaceX(imagenSal, valor));\r\n    });\r\n}\r\nfunction desfaseY(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputDesY\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var des = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValDesY\");\r\n        var valor = des;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.toDesfaceY(imagenSal, valor));\r\n    });\r\n}\r\nfunction desfaseD(evt) {\r\n    document.getElementsByClassName(\"inputDesD\")[0].addEventListener(\"change\", function (e) {\r\n        DesfDiag(e);\r\n        cambiosInputValor(e, \"ValDesD1\");\r\n    });\r\n    document.getElementsByClassName(\"inputDesD\")[1].addEventListener('change', function (e) {\r\n        DesfDiag(e);\r\n        cambiosInputValor(e, \"ValDesD2\");\r\n    });\r\n}\r\nfunction DesfDiag(e) {\r\n    var u1 = document.getElementsByClassName(\"inputDesD\")[0];\r\n    var u2 = document.getElementsByClassName(\"inputDesD\")[1];\r\n    var rangos = [parseInt(u1.value), parseInt(u2.value)];\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toDesfaceD(imagenSal, rangos[0], rangos[1]));\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones de edición ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction colorGradienteX(evt) {\r\n    document.getElementsByClassName(\"inputGradX\")[0].addEventListener(\"change\", function (e) {\r\n        GradX(e);\r\n        cambiosInputValor(e, \"ValorGradX1\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradX\")[1].addEventListener(\"change\", function (e) {\r\n        GradX(e);\r\n        cambiosInputValor(e, \"ValorGradX2\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradX\")[2].addEventListener(\"change\", function (e) {\r\n        GradX(e);\r\n        cambiosInputValor(e, \"ValorGradX3\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradX\")[3].addEventListener(\"change\", function (e) {\r\n        GradX(e);\r\n        cambiosInputValor(e, \"ValorGradX4\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradX\")[4].addEventListener(\"change\", function (e) {\r\n        GradX(e);\r\n        cambiosInputValor(e, \"ValorGradX5\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradX\")[5].addEventListener(\"change\", function (e) {\r\n        GradX(e);\r\n        cambiosInputValor(e, \"ValorGradX6\");\r\n    });\r\n}\r\nfunction GradX(e) {\r\n    var u1 = document.getElementsByClassName(\"inputGradX\")[0];\r\n    var u2 = document.getElementsByClassName(\"inputGradX\")[1];\r\n    var u3 = document.getElementsByClassName(\"inputGradX\")[2];\r\n    var u4 = document.getElementsByClassName(\"inputGradX\")[3];\r\n    var u5 = document.getElementsByClassName(\"inputGradX\")[4];\r\n    var u6 = document.getElementsByClassName(\"inputGradX\")[5];\r\n    var valor = [parseInt(u1.value), parseInt(u2.value), parseInt(u3.value), parseInt(u4.value), parseInt(u5.value), parseInt(u6.value)];\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.colorGradienteX(imagenSal, valor));\r\n}\r\nfunction colorGradienteY(evt) {\r\n    document.getElementsByClassName(\"inputGradY\")[0].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY1\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[1].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY2\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[2].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY3\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[3].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY4\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[4].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY5\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[5].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY6\");\r\n    });\r\n}\r\nfunction GradY(e) {\r\n    var u1 = document.getElementsByClassName(\"inputGradY\")[0];\r\n    var u2 = document.getElementsByClassName(\"inputGradY\")[1];\r\n    var u3 = document.getElementsByClassName(\"inputGradY\")[2];\r\n    var u4 = document.getElementsByClassName(\"inputGradY\")[3];\r\n    var u5 = document.getElementsByClassName(\"inputGradY\")[4];\r\n    var u6 = document.getElementsByClassName(\"inputGradY\")[5];\r\n    var valor = [parseInt(u1.value), parseInt(u2.value), parseInt(u3.value), parseInt(u4.value), parseInt(u5.value), parseInt(u6.value)];\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.colorGradientY(imagenSal, valor));\r\n}\r\nfunction opchangeContraste(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputContraste\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var n = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorContraste\");\r\n        var valor = n;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.changeContraste(imagenSal, valor));\r\n    });\r\n}\r\nfunction changeBrightness(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputBrillo\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var n = parseFloat(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorBrillo\");\r\n        var valor = n;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.changeBrightness(imagenSal, valor));\r\n    });\r\n}\r\nfunction ecualizado(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.ecualizar(imagenSal));\r\n}\r\nfunction opchangeFalsoColor(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputFC\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var n = parseFloat(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorFC\");\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.fromHSItoRGB(MathImg_1.MathImg.falseColorByHue(MathImg_1.MathImg.fromRGBtoHSI(imagenSal), n, 210)));\r\n    });\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones Matemáticas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction opgetPow(evt) {\r\n    var _a;\r\n    var potencia = 1;\r\n    (_a = document.getElementById(\"inputPotencia\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        potencia = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorPotencia\");\r\n        var valor = potencia;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.pow(imagenSal, valor));\r\n    });\r\n}\r\nfunction sqrt(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.toSqrt(imagenSal));\r\n}\r\n/* Trigonometricas */\r\nfunction coseno(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.toCos(imagenSal));\r\n}\r\nfunction funcionSine(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.toSine(imagenSal));\r\n}\r\nfunction tan(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.toTan(imagenSal));\r\n}\r\nfunction add(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputSuma\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorSuma\");\r\n        var sumar = valor;\r\n        console.log(typeof valor);\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toAdd(imagenSal, sumar));\r\n    });\r\n}\r\nfunction subtract(evt) {\r\n    var _a;\r\n    var valor = 0;\r\n    (_a = document.getElementById(\"inputResta\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorResta\");\r\n        var restar = valor;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toSubtract(imagenSal, restar));\r\n    });\r\n}\r\nfunction multiplicacion(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputMult\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorMult\");\r\n        var mult = valor;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toMultiplication(imagenSal, mult));\r\n    });\r\n}\r\nfunction div(evt) {\r\n    var _a;\r\n    var valor = 0;\r\n    (_a = document.getElementById(\"inputDiv\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorDiv\");\r\n        var mult = valor;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.toDividir(imagenSal, mult));\r\n    });\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones Imagenes ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction sumaImg(evt) {\r\n    var img = new Image();\r\n    var file = document.getElementById(\"SumaIguales\");\r\n    var fi = file === null || file === void 0 ? void 0 : file.files[0];\r\n    var reader = new FileReader();\r\n    reader.addEventListener(\"load\", function () {\r\n        img.src = reader.result;\r\n        img.onload = function () {\r\n            var posicionX = (canvasFic.width - (canvasFic.width / 2.3)) / 2;\r\n            var posicionY = (canvasFic.height - (canvasFic.width / 2.3)) / 2;\r\n            var tamWidth = canvasFic.width / 2.3;\r\n            var tamHeight = canvasFic.width / 2.3;\r\n            ctxFic.drawImage(img, posicionX, posicionY, tamWidth, tamHeight);\r\n            var imagen2 = new ImageType_1.ImageType(ctxFic, img);\r\n            var imagenSal = new ImageType_1.ImageType(ctx, imgLocal.getImage());\r\n            imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.addImg(imagenSal, imagen2));\r\n        };\r\n    }, false);\r\n    if (fi) {\r\n        reader.readAsDataURL(fi);\r\n    }\r\n}\r\nfunction reescala(evt) {\r\n    /*     var imagenSal: ImageType = new ImageType(pantalla1, imgLocal.getImage());\r\n        var imagen2: ImageType = new ImageType(pantalla4, imgLocal4.getImage());\r\n        var d1=imagenSal._height+imagenSal._width\r\n        var d2=imagen2._height+imagen2._width\r\n        if(d1>=d2){\r\n          imagenSal.imageArray2DtoData(pantalla2, MathImg.reescalaImg(imagenSal, imagen2));\r\n        }\r\n        else if(d1<d2){\r\n          imagen2.imageArray2DtoData(pantalla2,MathImg.reescalaImg(imagen2,imagenSal))\r\n        } */\r\n}\r\nfunction marcaCentro() {\r\n    var opacidad = 0;\r\n    var barra = document.getElementById(\"inputPorcentaje\");\r\n    barra.addEventListener('change', function () {\r\n        opacidad = parseFloat(barra.value);\r\n        var canvas4 = document.createElement('canvas');\r\n        var ctx4 = canvas4.getContext(\"2d\", { willReadFrequently: true });\r\n        canvas4.width = 979;\r\n        canvas4.height = 495;\r\n        var img = new Image();\r\n        var file = document.getElementById(\"MACentroInput\");\r\n        var fi = file === null || file === void 0 ? void 0 : file.files[0];\r\n        var reader = new FileReader();\r\n        reader.addEventListener(\"load\", function () {\r\n            img.src = reader.result;\r\n            img.onload = function () {\r\n                var posicionX = (canvas4.width - (canvas4.width / 2.3)) / 2;\r\n                var posicionY = (canvas4.height - (canvas4.width / 2.3)) / 2;\r\n                var tamWidth = canvasFic.width / 2.3;\r\n                var tamHeight = canvasFic.width / 2.3;\r\n                ctx4.drawImage(img, (canvas4.width / 2) - (img.width / 2), (canvas4.height / 2) - (img.height / 2));\r\n                var imagen2 = new ImageType_1.ImageType(ctx4, img);\r\n                var imagenSal = new ImageType_1.ImageType(ctx, imgLocal.getImage());\r\n                imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.marcaAguaCentro(imagen2, imagenSal, opacidad));\r\n            };\r\n        }, false);\r\n        if (fi) {\r\n            reader.readAsDataURL(fi);\r\n        }\r\n    });\r\n}\r\nfunction marcaAguaCentro(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"MACentroInput\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function () {\r\n        marcaCentro();\r\n        /*         document.getElementById(\"inputPorcentaje\")?.addEventListener(\"change\",(e)=>{\r\n                    console.log(document.getElementById(\"inputPorcentaje\"))\r\n                    marcaCentro()\r\n                }) */\r\n    });\r\n}\r\nfunction marcaAguaArray(evt) {\r\n    /*     let argss = prompt('Ingresa porcentaje de  ');\r\n        let porc = parseFloat(argss);\r\n        var imagenSal: ImageType = new ImageType(pantalla1, imgLocal.getImage());\r\n        var imagen2: ImageType = new ImageType(pantalla4, imgLocal4.getImage());\r\n        imagenSal.imageArray2DtoDataWithResizing(pantalla2, MathImg.marcaAguaArray(imagenSal, imagen2, porc)); */\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones Nuevas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\n//variables adicionales para el efecto rain\r\n//let ctx = ctx;\r\nvar w;\r\nvar h;\r\nvar numberOfParticles = 1000;\r\nvar particlesArray;\r\nparticlesArray = new Array(0);\r\nvar imagenSal;\r\nfunction init() {\r\n    //init\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, image);\r\n    var tmp = MathImg_1.MathImg.relativeBrightness(imagenSal);\r\n    w = imagenSal.getWidth();\r\n    h = imagenSal.getHeight();\r\n    for (var i = 0; i < numberOfParticles; i++) {\r\n        particlesArray.push(new particle_1.Particle(w, h, ctx, tmp));\r\n    }\r\n}\r\nfunction animate() {\r\n    ctx.drawImage(image, 0, 0, w, h);\r\n    ctx.globalAlpha = 0.25;\r\n    ctx.fillStyle = 'rgb(0,0,0)';\r\n    ctx.fillRect(0, 0, w, h);\r\n    for (var i = 0; i < particlesArray.length; i++) {\r\n        particlesArray[i].update();\r\n        particlesArray[i].draw();\r\n    }\r\n    requestAnimationFrame(animate);\r\n}\r\nfunction animate2() {\r\n    ctx.globalAlpha = 0.25;\r\n    ctx.fillStyle = 'rgb(0,0,0)';\r\n    ctx.fillRect(0, 0, w, h);\r\n    for (var i = 0; i < particlesArray.length; i++) {\r\n        particlesArray[i].update();\r\n        ctx.globalAlpha = particlesArray[i].getSpeed() * 0.5;\r\n        particlesArray[i].draw();\r\n    }\r\n    requestAnimationFrame(animate2);\r\n}\r\nfunction rain(evt) {\r\n    init();\r\n    animate();\r\n}\r\nfunction rain2(evt) {\r\n    init();\r\n    animate2();\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones texto ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nvar particleArray;\r\nvar mouse = {\r\n    x: null,\r\n    y: null,\r\n    radius: 50\r\n};\r\nfunction handleMouse(e) {\r\n    mouse.x = e.x; // - canvasPosition.left;\r\n    mouse.y = e.y; // - canvasPosition.top;\r\n    //console.log(mouse.x, mouse.y)\r\n}\r\nfunction textEfects(evt) {\r\n    //var args = prompt(\"Ingresa texto, tamaño de texto y coord x y y, separados por coma:\")!;\r\n    //var factores = args.split(',');//.map(elem => parseInt(elem));\r\n    //ctx.font = 'bold  ' + factores[1] + 'px Verdana';        \r\n    ctx.font = 'bold  ' + 34 + 'px Verdana';\r\n    //ctx.fillText(factores[0], parseInt(factores[2]), parseInt(factores[3]));\r\n    ctx.fillText(\"Holaaa!!\", 100, 100);\r\n    imagenSal = new ImageType_1.ImageType(ctx, undefined, 300, 300, true);\r\n    initParticles();\r\n    animateParticles();\r\n}\r\nfunction initParticles() {\r\n    particleArray = [];\r\n    var arrImage = imagenSal.getArrayImg();\r\n    for (var i = 0; i < 300; i++) {\r\n        for (var j = 0; j < 300; j++) {\r\n            if (arrImage[0][i][j] > 128) {\r\n                particleArray.push(new particle_2.ParticleText(j, i, ctx));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction animateParticles() {\r\n    //ctx.clearRect(0,0,300,300);    \r\n    for (var i = 0; i < particleArray.length; i++) {\r\n        particleArray[i].update(mouse);\r\n        particleArray[i].draw();\r\n    }\r\n    requestAnimationFrame(animateParticles);\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones Morfológicas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction dilatarImg(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.dilatar(imagenSal, true));\r\n}\r\nfunction erosionarImg(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.erosionar(imagenSal, true));\r\n}\r\nfunction aperturaImg(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.apertura(imagenSal, true));\r\n}\r\nfunction cierreImg(evt) {\r\n    console.log(\"cierre\");\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.cierre(imagenSal, true));\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones Sintéticas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction generarPulso(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    //imagenSal.imageArray2DtoData(ctx, MathImg.pulso(imgLocal.getImage().width, imgLocal.getImage().height));\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.pulso(imagenSal));\r\n}\r\nfunction generarRuido(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.ruido(imagenSal.getWidth(), imagenSal.getHeight()));\r\n}\r\nfunction generarRampaX(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.rampaX(imagenSal.getWidth(), imagenSal.getHeight()));\r\n}\r\nfunction generarRampaY(evt) {\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.rampaY(imagenSal.getWidth(), imagenSal.getHeight()));\r\n}\r\n/*[0][0][0][0][0][0][0][0][0] -------- Opciones Sintéticas ------[0][0][0][0][0][0][0][0][0][0][0][0][0]*/\r\nfunction escalarImagen(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputEsc\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorEsc\");\r\n        var factor = valor;\r\n        //var imagenSal: ImageType = new ImageType(ctxFic, undefined, Math.floor(imgLocal.getImage().width*factor), Math.floor(imgLocal.getImage().height*factor));\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, undefined, Math.floor(image.width * factor), Math.floor(image.height * factor));\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.escalar(imagenSal, factor));\r\n    });\r\n}\r\nfunction escalarImagen2(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputEsc\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorEsc\");\r\n        var factor = valor;\r\n        //ctx.drawImage(imgLocal.getImage(), 0,0, Math.floor(imgLocal.getImage().width*factor), Math.floor(imgLocal.getImage().height*factor));\r\n        ctx.clearRect(0, 0, exports.canvas.width, exports.canvas.height);\r\n        ctx.drawImage(image, 0, 0, Math.floor(image.width * factor), Math.floor(image.height * factor));\r\n    });\r\n}\r\nfunction rotarImagen(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputRotar\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseInt(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorRotar\");\r\n        var angulo = valor;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.rotar(imagenSal, angulo));\r\n    });\r\n}\r\nfunction rotarImagen2(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputRotar\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        ctx.clearRect(0, 0, image.width, image.height);\r\n        var imgdata = ctxO.getImageData(0, 0, exports.NumnewCanWidth, exports.NumnewCanHeight);\r\n        console.log(\"WWWWWWWW\", imgdata);\r\n        var valor = 0;\r\n        valor = parseInt(e.currentTarget.value);\r\n        console.log(\"ESCUCHAAAAAAA\", valor);\r\n        /*         var value=document.getElementById(\"ValorRotar\")! as HTMLInputElement\r\n                value.value=e.currentTarget.value */\r\n        cambiosInputValor(e, \"ValorRotar\");\r\n        var angulo = valor;\r\n        ctx.translate(exports.NumnewCanWidth / 2, exports.NumnewCanHeight / 2);\r\n        ctx.rotate(angulo * Math.PI / 180);\r\n        ctx.translate(-exports.NumnewCanWidth / 2, -exports.NumnewCanHeight / 2);\r\n        ctx.clearRect(0, 0, exports.NumnewCanWidth, exports.NumnewCanHeight);\r\n        console.log(\"VERIFICANDO TAMAÑO REAL\");\r\n        ctx.drawImage(image, 0, 0, exports.NumnewCanWidth, exports.NumnewCanHeight);\r\n    });\r\n    //ctx.drawImage(imgLocal.getImage(), 0,0)\r\n}\r\nfunction shearingX(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputShearingX\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseFloat(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorShearingX\");\r\n        var factor = valor;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.shearingX(imagenSal, factor));\r\n    });\r\n}\r\nfunction shearingY(evt) {\r\n    var _a;\r\n    (_a = document.getElementById(\"inputShearingY\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", function (e) {\r\n        var valor = parseFloat(e.currentTarget.value);\r\n        cambiosInputValor(e, \"ValorShearingY\");\r\n        var factor = valor;\r\n        var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(ctx, MathImg_1.MathImg.shearingY(imagenSal, factor));\r\n        console.log(e.currentTarget.value);\r\n    });\r\n}\r\nfunction tAfin(evt) {\r\n    document.getElementsByClassName(\"inputGradY\")[0].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY1\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[1].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY2\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[2].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY3\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[3].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY4\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[4].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY5\");\r\n    });\r\n    document.getElementsByClassName(\"inputGradY\")[5].addEventListener(\"change\", function (e) {\r\n        GradY(e);\r\n        cambiosInputValor(e, \"ValorGradY6\");\r\n    });\r\n}\r\nfunction TransAFin(e) {\r\n    var u1 = document.getElementsByClassName(\"inputGradY\")[0];\r\n    var u2 = document.getElementsByClassName(\"inputGradY\")[1];\r\n    var u3 = document.getElementsByClassName(\"inputGradY\")[2];\r\n    var u4 = document.getElementsByClassName(\"inputGradY\")[3];\r\n    var u5 = document.getElementsByClassName(\"inputGradY\")[4];\r\n    var u6 = document.getElementsByClassName(\"inputGradY\")[5];\r\n    var valor = [parseInt(u1.value), parseInt(u2.value), parseInt(u3.value), parseInt(u4.value), parseInt(u5.value), parseInt(u6.value)];\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(ctx, MathImg_1.MathImg.colorGradientY(imagenSal, valor));\r\n}\r\nfunction histogramas(evt) {\r\n    var lienzo2 = document.getElementById(\"histograma1\");\r\n    var pantalla2 = exports.canvas.getContext(\"2d\");\r\n    var lienzo4 = document.getElementById(\"histograma2\");\r\n    var pantalla4 = exports.canvas.getContext(\"2d\");\r\n    var imagenSal = new ImageType_1.ImageType(ctxFic, imgLocal.getImage());\r\n    var canvas1 = lienzo2;\r\n    var graphics1 = pantalla2;\r\n    var canvas2 = lienzo4;\r\n    var graphics2 = pantalla4;\r\n    var hist = MathImg_1.MathImg.hist(imagenSal);\r\n    console.log(hist);\r\n    var miCanvas1 = new canvasLocal_1.CanvasLocal(graphics1, canvas1, hist);\r\n    miCanvas1.paint();\r\n    var histAc = MathImg_1.MathImg.histAcum(hist);\r\n    var miCanvas2 = new canvasLocal_1.CanvasLocal(graphics2, canvas2, histAc);\r\n    miCanvas2.paint();\r\n}\r\nvar imageSave = function (img, tamWidth, tamHeight) {\r\n    canvasR.width = tamWidth;\r\n    canvasR.height = tamHeight;\r\n    ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.drawImage(img, 0, 0, tamWidth, tamHeight);\r\n    var imageData = ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.getImageData(0, 0, tamWidth, tamHeight);\r\n    var pixels = imageData === null || imageData === void 0 ? void 0 : imageData.data;\r\n    //console.log(imageData?.width)\r\n    var numPixels = (imageData === null || imageData === void 0 ? void 0 : imageData.width) * (imageData === null || imageData === void 0 ? void 0 : imageData.height);\r\n    for (var i = 0; i < numPixels; i++) {\r\n        var r = pixels[i * 4], g = pixels[i * 4 + 1], b = pixels[i * 4 + 2];\r\n        var grey = (r + g + b) / 3;\r\n        pixels[i * 4] = grey;\r\n        pixels[i * 4 + 1] = grey;\r\n        pixels[i * 4 + 2] = grey;\r\n    }\r\n    ctx2.putImageData(imageData, 0, 0);\r\n};\r\n$BtnSave.addEventListener(\"click\", function () {\r\n    var enlace = document.createElement('a');\r\n    enlace.download = \"PruebadescargaCanvas.jpg\";\r\n    enlace.href = canvasR.toDataURL(\"image/jpeg\", 1);\r\n    enlace.click();\r\n});\r\n\n\n//# sourceURL=webpack://processtype/./src/index.js?");

/***/ }),

/***/ "./src/particle.js":
/*!*************************!*\
  !*** ./src/particle.js ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nexports.__esModule = true;\r\nexports.ParticleText = exports.Particle = void 0;\r\nvar Particle = /** @class */ (function () {\r\n    function Particle(width, height, screenCanvas, mapImg) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ctx = screenCanvas;\r\n        this.x = Math.random() * width;\r\n        this.y = 0;\r\n        this.speed = 0;\r\n        this.velocity = Math.random() * 2.5;\r\n        this.size = Math.random() * 1.5 + 1;\r\n        this._2PI = Math.PI * 2;\r\n        this.position1 = Math.floor(this.y);\r\n        this.position2 = Math.floor(this.x);\r\n        this.mappedImage = mapImg;\r\n    }\r\n    Particle.prototype.update = function () {\r\n        this.position1 = Math.floor(this.y);\r\n        this.position2 = Math.floor(this.x);\r\n        var movement = 0;\r\n        if (this.y < this.height) {\r\n            this.speed = this.mappedImage[0][this.position1][this.position2];\r\n            movement = (2.5 - this.speed) + this.velocity;\r\n        }\r\n        this.y += movement;\r\n        if (this.y >= this.height) {\r\n            this.y = 0;\r\n            this.x = Math.random() * this.width;\r\n        }\r\n    };\r\n    Particle.prototype.draw = function () {\r\n        this.ctx.beginPath();\r\n        //this.ctx.fillStyle = this.mappedImage[1][this.position1][this.position2];\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.arc(this.x, this.y, this.size, 0, this._2PI);\r\n        this.ctx.fill();\r\n    };\r\n    Particle.prototype.getSpeed = function () {\r\n        return this.speed;\r\n    };\r\n    return Particle;\r\n}());\r\nexports.Particle = Particle;\r\nvar ParticleText = /** @class */ (function () {\r\n    function ParticleText(x, y, screenCanvas, mapImg) {\r\n        this.ctx = screenCanvas;\r\n        this.x = x; // + 200;\r\n        this.y = y; // - 100,\r\n        this.size = 1;\r\n        this.baseX = this.x;\r\n        this.baseY = this.y;\r\n        this.density = ((Math.random() * 30) + 1);\r\n        this._2PI = Math.PI * 2;\r\n        this.mappedImage = mapImg;\r\n    }\r\n    ParticleText.prototype.update = function (mouse) {\r\n        var dx = mouse.x - this.x;\r\n        var dy = mouse.y - this.y;\r\n        var distance = Math.sqrt(dx * dx + dy * dy);\r\n        var forceDirectionX = dx / distance;\r\n        var forceDirectionY = dy / distance;\r\n        var maxDistance = mouse.radius;\r\n        var force = (maxDistance - distance) / maxDistance;\r\n        var directionX = (forceDirectionX * force * this.density);\r\n        var directionY = (forceDirectionY * force * this.density);\r\n        if (distance < mouse.radius) {\r\n            this.x -= directionX;\r\n            this.y -= directionY;\r\n        }\r\n        else {\r\n            if (this.x !== this.baseX) {\r\n                var dx_1 = this.x - this.baseX;\r\n                this.x -= dx_1 / 5;\r\n            }\r\n            if (this.y !== this.baseY) {\r\n                var dy_1 = this.y - this.baseY;\r\n                this.y -= dy_1 / 5;\r\n            }\r\n        }\r\n    };\r\n    ParticleText.prototype.draw = function () {\r\n        this.ctx.fillStyle = 'blue';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.x, this.y, this.size, 0, this._2PI);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    };\r\n    return ParticleText;\r\n}());\r\nexports.ParticleText = ParticleText;\r\n\n\n//# sourceURL=webpack://processtype/./src/particle.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;